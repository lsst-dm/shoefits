[build-system]
requires = ["setuptools", "lsst-versions >= 1.3.0"]
build-backend = "setuptools.build_meta"

[project]
name = "shoefits"
requires-python = ">=3.11.0"
description = "Schema-based Hierarchical Object Embedding in FITS."
license = { text = "BSD 3-Clause License" }
readme = "README.md"
authors = [
    { name = "Jim Bosch", email = "jbosch@astro.princeton.edu" },
    { name = "Rubin Observatory Data Management", email = "dm-admin@lists.lsst.org" },
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Astronomy",
]
keywords = ["lsst"]
dependencies = [
    "astropy >=6.0",
    "pydantic >=2.7,<3.0",
    "numpy >=1.20",
    "lsst-utils",
    "lsst-shoefits",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/lsst-dm/shoefits"

[project.optional-dependencies]
test = ["pytest >= 8.2", "jsonschema >= 4.20"]
# Also expose the optional dependencies of lsst-resources as optional
# dependencies.  This package doesn't care what resource methods are available,
# but downstream code may view it as a black box and lsst-resources as an
# internal implementation detail, and therefore may find it more logical to
# specify optional dependencies here.
s3 = ["lsst-resources[s3]"]
https = ["lsst-resources[https]"]
gs = ["lsst-resources[gs]"]

[tool.towncrier]
package = "lsst.shoefits"
package_dir = "python"
filename = "doc/lsst.shoefits/CHANGES.rst"
directory = "doc/changes"
title_format = "Resources {version} {project_date}"
issue_format = "`{issue} <https://jira.lsstcorp.org/browse/{issue}>`_"

[[tool.towncrier.type]]
directory = "feature"
name = "New Features"
showcontent = true

[[tool.towncrier.type]]
directory = "api"
name = "API Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bug Fixes"
showcontent = true

[[tool.towncrier.type]]
directory = "perf"
name = "Performance Enhancement"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellaneous Changes of Minor Interest"
showcontent = true

[[tool.towncrier.type]]
directory = "removal"
name = "An API Removal or Deprecation"
showcontent = true

[tool.setuptools.packages.find]
where = ["python"]

[tool.setuptools]
zip-safe = true
license-files = ["COPYRIGHT", "LICENSE", "bsd_license.txt", "gpl-v3.0.txt"]

[tool.setuptools.package-data]
"shoefits" = ["py.typed"]

[tool.setuptools.dynamic]
version = { attr = "lsst_versions.get_lsst_version" }

[tool.lsst_versions]
write_to = "python/shoefits/version.py"

[tool.pydocstyle]
convention = "numpy"
# Our coding style does not require docstrings for magic methods (D105)
# Our docstyle documents __init__ at the class level (D107)
# We allow methods to inherit docstrings and this is not compatible with D102.
# Docstring at the very first line is not required
# D200, D205 and D400 all complain if the first sentence of the docstring does
# not fit on one line. We do not require docstrings in __init__ files (D104).
add-ignore = ["D107", "D105", "D102", "D100", "D200", "D205", "D400", "D104"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 110
target-version = ["py312"]

[tool.isort]
profile = "black"
line_length = 110
known_first_party = ["lsst"]
known_local_folder = ["python"]

[tool.ruff]
line-length = 110
target-version = "py312"

[tool.ruff.lint]
ignore = [
    "N802",
    "N803",
    "N806",
    "N812",
    "N815",
    "N816",
    "N999",
    "D107",
    "D105",
    "D102",
    "D104",
    "D100",
    "D200",
    "D205",
    "D400",
    "UP007", # Allow UNION in type annotation
    "UP040", # Allow TypeAlias instead of type statement until MyPy supports it.
]
select = [
    "E",  # pycodestyle
    "F",  # pycodestyle
    "N",  # pep8-naming
    "W",  # pycodestyle
    "D",  # pydocstyle
    "UP", # pyupgrade
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
warn_unused_configs = true
warn_redundant_casts = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
strict_equality = true
warn_unreachable = true
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = ["astropy.*", "jsonpointer", "jsonschema"]
ignore_missing_imports = true
